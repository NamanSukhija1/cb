1 function doubleArrayElements(array, callback) {
  const doubledArray = array.map(item => callback(item));
  return doubledArray;
}

const numbers = [1, 2, 3, 4, 5];
const doubledNumbers = doubleArrayElements(numbers, num => num * 2);
console.log(doubledNumbers);



2 function manipulateStringToUppercase(string) {
  const manipulatedString = string.toUpperCase();
  function logManipulatedString() {
    console.log(`The manipulated string is: ${manipulatedString}`);
  }
  return logManipulatedString;
}

const logManipulatedString = manipulateStringToUppercase("hello world");
logManipulatedString();

3 function calculateAgeInDays(person) {
  const { firstName, lastName, ageInYears } = person;
  const fullName = `${firstName} ${lastName}`;
  const ageInDays = ageInYears * 365;
  function logAgeInDays() {
    console.log(`The person's full name is ${fullName} and their age in days is ${ageInDays}.`);
  }
  return logAgeInDays;
}

const personInfo = { firstName: 'John', lastName: 'Doe', ageInYears: 30 };
const logAge = calculateAgeInDays(personInfo);
logAge();


4 
function getSortedBookTitles(books, callback) {
  const titles = books.map(book => book.title);
  const sortedTitles = titles.sort();
  callback(sortedTitles);
}

const books = [
  { title: 'Harry Potter', author: 'J.K. Rowling', year: 1997 },
  { title: 'Lord of the Rings', author: 'J.R.R. Tolkien', year: 1954 },
  { title: 'To Kill a Mockingbird', author: 'Harper Lee', year: 1960 }
];

getSortedBookTitles(books, sortedTitles => {
  console.log('Titles in alphabetical order:', sortedTitles);
});


5function greetWithMessage(name) {
  return new Promise((resolve, reject) => {
    if (!name) {
      reject('Name is required!');
    } else {
      resolve(`Hello, ${name}!`);
    }
  });
}

const userName = 'Mithun';
greetWithMessage(userName)
  .then(greeting => console.log(greeting))
  .catch(error => console.error('Error:', error));
6.async function fetchDataFromAPI() {
  try {
    const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error('Error fetching data:', error);
  }
}

fetchDataFromAPI();

7.async function fetchCombinedDataFromAPI() {
  try {
    const [todoResponse, postResponse] = await Promise.all([
      fetch('https://jsonplaceholder.typicode.com/todos/1'),
      fetch('https://jsonplaceholder.typicode.com/posts/1')
    ]);
    const todoData = await todoResponse.json();
    const postData = await postResponse.json();
    const combinedData = {
      todo: todoData,
      post: postData
    };
    console.log(combinedData);
  } catch (error) {
    console.error('Error fetching data:', error);
  }
}

fetchCombinedDataFromAPI();
8.fetch('https://jsonplaceholder.typicode.com/posts')
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Error fetching data:', error));

9.fetch('https://jsonplaceholder.typicode.com/posts/123456789')
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.json();
  })
  .then(data => console.log(data))
  .catch(error => console.error('Error fetching data:', error));
